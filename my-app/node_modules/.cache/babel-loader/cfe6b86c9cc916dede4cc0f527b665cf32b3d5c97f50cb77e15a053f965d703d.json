{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stefa\\\\KunstProjekt\\\\my-app\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\n// Sidebar.js\n// This is a sidebar component for our application.\n// It receives refs to the three main sections of the page (home, about, contact)\n// and a scrollToSection function as props.\n\nimport React, { useEffect, useState } from 'react';\nimport '../style/Sidebar.css'; // Assuming you have a separate CSS file for sidebar styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  homeRef,\n  aboutRef,\n  contactRef,\n  scrollToSection\n}) => {\n  _s();\n  // We'll use this state variable to keep track of which section\n  // is currently active, so we can set the appropriate CSS class\n  // on the corresponding list item.\n  const [activeSection, setActiveSection] = useState(null);\n\n  // The useEffect hook allows us to run some code when the component\n  // mounts or when certain values change. In this case, we want to\n  // run some code whenever the scroll position changes.\n  useEffect(() => {\n    // When the component mounts or whenever the scroll position changes,\n    // we'll run this function to update the activeSection state variable.\n    const handleScroll = () => {\n      // We use window.scrollY to get the current scroll position.\n      const scrollPosition = window.scrollY;\n\n      // If the scroll position is less than the offsetTop of the about\n      // section, we know we're currently on the home section.\n      if (scrollPosition < aboutRef.current.offsetTop) {\n        setActiveSection(homeRef);\n      }\n      // If the scroll position is greater than or equal to the offsetTop\n      // of the about section but less than the offsetTop of the contact\n      // section, we know we're currently on the about section.\n      else if (scrollPosition >= aboutRef.current.offsetTop && scrollPosition < contactRef.current.offsetTop) {\n        setActiveSection(aboutRef);\n      }\n      // Otherwise, we know we're currently on the contact section.\n      else {\n        setActiveSection(contactRef);\n      }\n    };\n\n    // When the component mounts, we add a scroll event listener to the window\n    // object. When the scroll position changes, we'll run the handleScroll\n    // function to update the activeSection state variable.\n    window.addEventListener('scroll', handleScroll);\n\n    // When the component unmounts, we remove the scroll event listener.\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n    // We want to run the handleScroll function whenever the scroll position\n    // changes, or when the refs to the sections change. We pass an array\n    // of dependencies as the second argument to useEffect.\n  }, [homeRef, aboutRef, contactRef]);\n\n  // This function will be called when a user clicks on one of the list\n  // items in the sidebar. It will scroll the page to the corresponding\n  // section.\n  const handleItemClick = ref => {\n    scrollToSection(ref);\n    setActiveSection(ref);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: activeSection === homeRef ? 'active' : '',\n        onClick: () => handleItemClick(homeRef),\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: activeSection === aboutRef ? 'active' : '',\n        onClick: () => handleItemClick(aboutRef),\n        children: \"About\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: activeSection === contactRef ? 'active' : '',\n        onClick: () => handleItemClick(contactRef),\n        children: \"Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n_s(Sidebar, \"kW/qpb4yZV+GyB1OX7BlObHuD0c=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Sidebar","homeRef","aboutRef","contactRef","scrollToSection","_s","activeSection","setActiveSection","handleScroll","scrollPosition","window","scrollY","current","offsetTop","addEventListener","removeEventListener","handleItemClick","ref","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/stefa/KunstProjekt/my-app/src/components/Sidebar.jsx"],"sourcesContent":["// Sidebar.js\r\n// This is a sidebar component for our application.\r\n// It receives refs to the three main sections of the page (home, about, contact)\r\n// and a scrollToSection function as props.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../style/Sidebar.css'; // Assuming you have a separate CSS file for sidebar styles\r\nconst Sidebar = ({ homeRef, aboutRef, contactRef, scrollToSection }) => {\r\n    // We'll use this state variable to keep track of which section\r\n    // is currently active, so we can set the appropriate CSS class\r\n    // on the corresponding list item.\r\n    const [activeSection, setActiveSection] = useState(null);\r\n   \r\n    // The useEffect hook allows us to run some code when the component\r\n    // mounts or when certain values change. In this case, we want to\r\n    // run some code whenever the scroll position changes.\r\n    useEffect(() => {\r\n      // When the component mounts or whenever the scroll position changes,\r\n      // we'll run this function to update the activeSection state variable.\r\n      const handleScroll = () => {\r\n        // We use window.scrollY to get the current scroll position.\r\n        const scrollPosition = window.scrollY;\r\n        \r\n        // If the scroll position is less than the offsetTop of the about\r\n        // section, we know we're currently on the home section.\r\n        if (scrollPosition < aboutRef.current.offsetTop) {\r\n          setActiveSection(homeRef);\r\n        }\r\n        // If the scroll position is greater than or equal to the offsetTop\r\n        // of the about section but less than the offsetTop of the contact\r\n        // section, we know we're currently on the about section.\r\n        else if (scrollPosition >= aboutRef.current.offsetTop && scrollPosition < contactRef.current.offsetTop) {\r\n          setActiveSection(aboutRef);\r\n        }\r\n        // Otherwise, we know we're currently on the contact section.\r\n        else {\r\n          setActiveSection(contactRef);\r\n        }\r\n      };\r\n  \r\n      // When the component mounts, we add a scroll event listener to the window\r\n      // object. When the scroll position changes, we'll run the handleScroll\r\n      // function to update the activeSection state variable.\r\n      window.addEventListener('scroll', handleScroll);\r\n  \r\n      // When the component unmounts, we remove the scroll event listener.\r\n      return () => {\r\n        window.removeEventListener('scroll', handleScroll);\r\n      };\r\n    // We want to run the handleScroll function whenever the scroll position\r\n    // changes, or when the refs to the sections change. We pass an array\r\n    // of dependencies as the second argument to useEffect.\r\n    }, [homeRef, aboutRef, contactRef]);\r\n  \r\n    // This function will be called when a user clicks on one of the list\r\n    // items in the sidebar. It will scroll the page to the corresponding\r\n    // section.\r\n    const handleItemClick = (ref) => {\r\n      scrollToSection(ref);\r\n      setActiveSection(ref);\r\n    };\r\n  \r\n    return (\r\n      <div className=\"sidebar\">\r\n        <ul>\r\n          <li\r\n            className={activeSection === homeRef ? 'active' : ''}\r\n            onClick={() => handleItemClick(homeRef)}\r\n          >\r\n            Home\r\n          </li>\r\n          <li\r\n            className={activeSection === aboutRef ? 'active' : ''}\r\n            onClick={() => handleItemClick(aboutRef)}\r\n          >\r\n            About\r\n          </li>\r\n          <li\r\n            className={activeSection === contactRef ? 'active' : ''}\r\n            onClick={() => handleItemClick(contactRef)}\r\n          >\r\n            Contact\r\n          </li>\r\n          \r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Sidebar;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC/B,MAAMC,OAAO,GAAGA,CAAC;EAAEC,OAAO;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACpE;EACA;EACA;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA;EACA;EACAD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMY,YAAY,GAAGA,CAAA,KAAM;MACzB;MACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,OAAO;;MAErC;MACA;MACA,IAAIF,cAAc,GAAGP,QAAQ,CAACU,OAAO,CAACC,SAAS,EAAE;QAC/CN,gBAAgB,CAACN,OAAO,CAAC;MAC3B;MACA;MACA;MACA;MAAA,KACK,IAAIQ,cAAc,IAAIP,QAAQ,CAACU,OAAO,CAACC,SAAS,IAAIJ,cAAc,GAAGN,UAAU,CAACS,OAAO,CAACC,SAAS,EAAE;QACtGN,gBAAgB,CAACL,QAAQ,CAAC;MAC5B;MACA;MAAA,KACK;QACHK,gBAAgB,CAACJ,UAAU,CAAC;MAC9B;IACF,CAAC;;IAED;IACA;IACA;IACAO,MAAM,CAACI,gBAAgB,CAAC,QAAQ,EAAEN,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXE,MAAM,CAACK,mBAAmB,CAAC,QAAQ,EAAEP,YAAY,CAAC;IACpD,CAAC;IACH;IACA;IACA;EACA,CAAC,EAAE,CAACP,OAAO,EAAEC,QAAQ,EAAEC,UAAU,CAAC,CAAC;;EAEnC;EACA;EACA;EACA,MAAMa,eAAe,GAAIC,GAAG,IAAK;IAC/Bb,eAAe,CAACa,GAAG,CAAC;IACpBV,gBAAgB,CAACU,GAAG,CAAC;EACvB,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,SAAS;IAAAC,QAAA,eACtBpB,OAAA;MAAAoB,QAAA,gBACEpB,OAAA;QACEmB,SAAS,EAAEZ,aAAa,KAAKL,OAAO,GAAG,QAAQ,GAAG,EAAG;QACrDmB,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAACf,OAAO,CAAE;QAAAkB,QAAA,EACzC;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLzB,OAAA;QACEmB,SAAS,EAAEZ,aAAa,KAAKJ,QAAQ,GAAG,QAAQ,GAAG,EAAG;QACtDkB,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAACd,QAAQ,CAAE;QAAAiB,QAAA,EAC1C;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACLzB,OAAA;QACEmB,SAAS,EAAEZ,aAAa,KAAKH,UAAU,GAAG,QAAQ,GAAG,EAAG;QACxDiB,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAACb,UAAU,CAAE;QAAAgB,QAAA,EAC5C;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACnB,EAAA,CAhFEL,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAkFX,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}